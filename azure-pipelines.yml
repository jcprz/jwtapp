# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

# pool:
#   vmImage: ubuntu-latest

variables:
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build job
    pool: 
      vmImage: ubuntu-latest
    steps:
    - script: |
        echo $sourceVersion
        commitHash=${sourceVersion:0:7}
        echo $commitHash
        echo "##vso[task.setvariable variable=commitHash]$commitHash" ## Set variable for using in other tasks.
      env: { sourceVersion: $(Build.SourceVersion) }
      displayName: Git Hash 7-digit

    - task: Docker@2
      inputs:
        containerRegistry: 'rocketops'
        repository: 'custom-jwtapp'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(tag)
          $(commitHash)
          latest
## Publish Artifacts pipeline code in addition to Build and Push          
    - bash: echo Contents in System Default Working Directory; ls -R $(System.DefaultWorkingDirectory)        
    - bash: echo Before copying Contents in Build Artifact Directory; ls -R $(Build.ArtifactStagingDirectory)        
    # Task-2: Copy files (Copy files from a source folder to target folder)
    # Source Directory: $(System.DefaultWorkingDirectory)/kube-manifests
    # Target Directory: $(Build.ArtifactStagingDirectory)


    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/manifests'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        OverWrite: true
    # List files from Build Artifact Staging Directory - After Copy
    - bash: echo After copying to Build Artifact Directory; ls -R $(Build.ArtifactStagingDirectory)  
    # Task-3: Publish build artifacts (Publish build to Azure Pipelines)           
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'manifests'
        publishLocation: 'Container'

   #does this work?     
    # strategy:
    #   runOnce:
    #     deploy:
    #       steps:
    #       - task: KubernetesManifest@0
    #         displayName: Create imagePullSecret
    #         inputs:
    #           action: createSecret
    #           secretName: $(imagePullSecret)
    #           dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

    # - task: KubernetesManifest@0
    #   displayName: Deploy to Kubernetes cluster
    #   inputs:
    #     action: deploy
    #       manifests: |
    #         $(Pipeline.Workspace)/manifests/deployment.yaml
    #         $(Pipeline.Workspace)/manifests/service.yaml
    #         $(Pipeline.Workspace)/manifests/cnfmps.yaml
    #         $(Pipeline.Workspace)/manifests/scrts.yml
    #       imagePullSecrets: |
    #         $(imagePullSecret)
    #       containers: |
    #         $(containerRegistry)/$(imageRepository):$(tag)

